/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users/route'
import { Route as HealthRouteImport } from './routes/health/route'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as HealthIndexImport } from './routes/health/index'
import { Route as TasksIdIndexImport } from './routes/tasks/$id/index'

// Create/Update Routes

const UsersRouteRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const HealthRouteRoute = HealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const HealthIndexRoute = HealthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HealthRouteRoute,
} as any)

const TasksIdIndexRoute = TasksIdIndexImport.update({
  id: '/tasks/$id/',
  path: '/tasks/$id/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthRouteImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/health/': {
      id: '/health/'
      path: '/'
      fullPath: '/health/'
      preLoaderRoute: typeof HealthIndexImport
      parentRoute: typeof HealthRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersRouteImport
    }
    '/tasks/$id/': {
      id: '/tasks/$id/'
      path: '/tasks/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface HealthRouteRouteChildren {
  HealthIndexRoute: typeof HealthIndexRoute
}

const HealthRouteRouteChildren: HealthRouteRouteChildren = {
  HealthIndexRoute: HealthIndexRoute,
}

const HealthRouteRouteWithChildren = HealthRouteRoute._addFileChildren(
  HealthRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/health': typeof HealthRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/health/': typeof HealthIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/users/': typeof UsersIndexRoute
  '/tasks/$id': typeof TasksIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/health': typeof HealthIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/users': typeof UsersIndexRoute
  '/tasks/$id': typeof TasksIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/health': typeof HealthRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/health/': typeof HealthIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/users/': typeof UsersIndexRoute
  '/tasks/$id/': typeof TasksIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/health'
    | '/users'
    | '/health/'
    | '/tasks'
    | '/users/'
    | '/tasks/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/health' | '/tasks' | '/users' | '/tasks/$id'
  id:
    | '__root__'
    | '/'
    | '/health'
    | '/users'
    | '/health/'
    | '/tasks/'
    | '/users/'
    | '/tasks/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HealthRouteRoute: typeof HealthRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  TasksIndexRoute: typeof TasksIndexRoute
  TasksIdIndexRoute: typeof TasksIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HealthRouteRoute: HealthRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  TasksIndexRoute: TasksIndexRoute,
  TasksIdIndexRoute: TasksIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/health",
        "/users",
        "/tasks/",
        "/tasks/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/health": {
      "filePath": "health/route.tsx",
      "children": [
        "/health/"
      ]
    },
    "/users": {
      "filePath": "users/route.tsx",
      "children": [
        "/users/"
      ]
    },
    "/health/": {
      "filePath": "health/index.tsx",
      "parent": "/health"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx",
      "parent": "/users"
    },
    "/tasks/$id/": {
      "filePath": "tasks/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
